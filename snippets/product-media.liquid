{%- doc -%}
  Renders individual product media items with variant-aware visibility, zoom controls, and responsive layouts.

  Displays a single media element (image, video, or 3D model) with support for variant-specific grouping, multi-language ALT tag connections, and adaptive aspect ratios. Handles complex media visibility rules based on selected variants and gang media configurations.

  @param {object} product - Shopify product object
  @param {object} product_variant - Currently selected variant
  @param {object} media - Media object to render
  @param {object} featured_media - Product's featured media
  @param {array} variant_images - Array of variant image sources
  @param {boolean} [hide_variants] - Hide variant-attached media
  @param {string} [image_ratio] - Desktop aspect ratio
  @param {string} [image_ratio_mobile] - Mobile aspect ratio
  @param {boolean} [image_fill] - Crop to fill (vs contain)
  @param {string} [gallery_layout] - Parent gallery layout
  @param {string} [image_zoom] - Zoom interaction type
  @param {string} section_id - Section identifier
  @param {string} product_id - Product identifier  
  @param {string} sizes - Responsive image sizes attribute
  @param {boolean} [preload] - Preload media resources
  @param {boolean} [autoplay] - Auto-play videos
  @param {boolean} [loop] - Loop video playback

  @example
  {% render 'product-media',
    product: product,
    product_variant: product.selected_or_first_available_variant,
    media: media,
    featured_media: product.featured_media,
    variant_images: variant_images,
    section_id: section.id,
    product_id: product.id
  %}
{%- enddoc -%}

{%- liquid
  assign show_product_media = true

  if product_variant.metafields.theme.gang_media.value != blank and product_variant.metafields.theme.gang_media.list?
    assign show_product_media = false
    for gang_media in product_variant.metafields.theme.gang_media.value
      if gang_media.id == media.id
        assign show_product_media = true
        break
      endif
    endfor
  else
    assign gang_media_active = false
    assign gang_connect_alt = ''
    if media.alt contains '#' and hide_variants == false
      assign gang_connect_alt = media.alt | split: '#' | last
      assign gang_connect_list = gang_connect_alt | split: ','
      for gang_connect_value in gang_connect_list
        assign gang_exist = false
        assign gang_connect = ''
        assign gang_option_name = ''
        assign gang_connect_item = gang_connect_value

        if gang_connect_item contains ':' and localization.language.iso_code != blank
          assign gang_split_param = localization.language.iso_code | append: ':'
          assign gang_connect_item = gang_connect_item | split: gang_split_param | last
        endif
        
        if gang_connect_item contains '_'
          assign gang_option_name = gang_connect_item | split: '_' | first | handleize

          for option_name in product.options
            assign option_name_handlized = option_name | handleize | replace: '_', '-'
            if option_name_handlized == gang_option_name
              assign gang_exist = true
              assign gang_connect = gang_connect_item
              
              assign option_key = 'option' | append: forloop.index
              assign current_option_value = product_variant[option_key] | handleize
              assign current_connect = option_name_handlized | append: '_' | append: current_option_value
              if gang_connect == current_connect
                assign gang_media_active = true
              endif
              break
            endif
          endfor

          if gang_exist == true
            break
          endif
        endif
      endfor
    endif
  endif

  if gang_exist == true
    assign media_alt = media.alt | split: '#' | first
  else
    assign media_alt = media.alt
  endif

  assign media_alt = media_alt | default: product.title
-%}

{%- if show_product_media -%}
  <div class="product__media card media media--{{ image_ratio }} mobile:media--{{ image_ratio_mobile }}{% unless image_fill %} media--contain{% endunless %} flex w-full shrink-0 relative overflow-hidden
    {%- if gallery_layout == 'scroll' and media.id == featured_media.id %} xl:hidden{% endif -%}
    {%- if hide_variants and variant_images contains media.src %} product__media--variant{% endif -%}"
    data-media-type="{{ media.media_type }}"
    data-media-id="{{ media.id }}"
    {%- if gang_exist == true %} data-gang-option="{{ gang_option_name }}" data-gang-connect="{{ gang_connect }}"{% if gang_media_active == false %} hidden{% endif %}{% else %} data-gang-default{% endif -%}
    {%- if image_ratio == 'adapt' or image_ratio_mobile == 'adapt' %} style="--aspect-ratio: {{ media.aspect_ratio }};"{% endif -%}
  >
    {%- render 'media', section_id: section_id, product_id: product_id, media: media, media_alt: media_alt, sizes: sizes, preload: preload, autoplay: autoplay, loop: loop -%}

    {%- if image_zoom != 'none' and media.media_type == 'image' -%}
      <button type="button" class="absolute top-0 left-0 w-full h-full flex items-center justify-center" is="media-{{ image_zoom }}-button" aria-label="{{ 'products.media.open_media' | t: index: media.position | escape }}" tabindex="-1">
        {%- render 'icon', icon: 'zoom', size: 'xs', class: 'lg:hidden' -%}
      </button>
    {%- endif -%}
  </div>
{%- endif -%}